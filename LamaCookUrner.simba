program LamaCookUrner;
{$i ezForm.simba}
{$i ogLib/lib/core/core.simba}

// 56k xp/hr
// 1.2m gp/hr profit

const
{============================== Script Options ==============================}

  _yourModelID = 327163060; // Enter your character model. ex: 327163060


  _DEBUG = false;           // set to true to see what's going on in text debug

  _OGL_DEBUG_MODE = 'none'; // what do you want OGL to debug? ex: 'textures', 'models', 'none', etc.


{==================================== End ===================================}


  SCRIPT = 'LamaCookUrner v';
  VERSION = 1.0;

var
  _NextAction: tCountdown;
  _Chars: glCharArray;
  _Models: glModelArray;
  _Textures: glTextureArray;
  _Minimap: glTextureArray;

  ezUrnMakeCount, ezUrnType, ezBankPreset, ezSmartProggy, ezRunScript: eZElement;
  _ezLamaForm: ezForm;

  _UrnMakeCount, _UrnMadeCount, _StartXP: integer;

  _Center: tPoint = [288, 194];
  _Done: boolean = false;
  _Timer: tCountdown;

procedure getUpdate(); { CREDITS: The Mayor }
var
  newFile: integer;
  newRev: extended;
begin
  newRev := strToFloat(getPage('http://tomstewart.net/proxy.php?url=https://raw.githubusercontent.com/sneakyLama/LamaCookUrner/master/version.txt'));

  if newRev > VERSION then
  begin
    writeln('Updating from revision ' + toStr(VERSION) + ' to revision ' + toStr(newRev));
    newFile := rewriteFile(scriptPath + 'LamaCookUrner v' + toStr(newRev) + '.simba', false);
    writeFileString(newFile, getPage('http://tomstewart.net/proxy.php?url=https://raw.githubusercontent.com/sneakyLama/LamaCookUrner/master/LamaCookUrner.simba'));
    closeFile(newFile);
    writeLn('Downloaded to: ' + scriptPath + 'LamaCookUrner v' + toStr(newRev) + '.simba');
    writeln('Please open the new file.');
    terminateScript();
  end
  else
    writeln('Script is up-to-date.');
end;

procedure pFormWebLink(vSender: tObject); native;
begin
  openWebPage('https://villavu.com/forum/showthread.php?t=114917');
end;

procedure pFormCreate();
begin
  _ezLamaForm.create('Lama''s Cook Urner');

  _ezLamaForm.addImage('https://puu.sh/l9Zca/bac30e73a5.jpg', '', [0, 0], [260, 148], nil); // header image

  _ezLamaForm.addGroupbox('Options', 'b s14', '', [0, 135], [260, 130]);
    _ezLamaForm.addLabel('Urn Quality', 'c8421504 i s10', '', [20, 160]);
      ezUrnType := _ezLamaForm.addCombobox(['Decorated', 'Strong'], 's10', '', [30, 180], 90, nil).prop('readonly', true);
    _ezLamaForm.addLabel('Bank Preset', 'c8421504 i s10', '', [130, 160]);
      ezBankPreset := _ezLamaForm.addCombobox(['1', '2'], 's10', '', [140, 180], 65, nil).prop('readonly', true);
    _ezLamaForm.addLabel('Urns to Make', 'c8421504 i s10', '', [20, 210]);
      ezUrnMakeCount := _ezLamaForm.addMemo('9001', 'i', '', [30, 230], [90, 20], nil);
    ezSmartProggy := _ezLamaForm.addCheckbox('SMART Report', 'c8421504 i s10', '', [140, 230], nil);

  _ezLamaForm.addImage('http://puu.sh/l77DQ/4eb83917ec.png', '', [0, 265], [260, 30], pFormWebLink); // Visit thread image

  _ezLamaForm.show();
end;

function tMinimap.getBounds(): tBox; // Gets minimap bounds
var
  funcPointer:^glTexture;
  funcPointerSize:uInt32;
begin
  funcPointer:=glTextures(funcPointerSize);
  for 0 to funcPointerSize-1 do
  begin
    if funcPointer^.id=237147 then
    begin
      result := [funcPointer^.bounds.x1, funcPointer^.bounds.y1, (funcPointer+3*oglTextureSize)^.bounds.x2, (funcPointer+3*oglTextureSize)^.bounds.y2];
      break;
    end;
    funcPointer += oglTextureSize;
  end;
  exit(result);
end;

function tOGL.getFormattedTime(time: uint32): string; { CREDITS: Ross }
var
  h, m, s: integer;
begin
  s := time mod 3600000 mod 60000 div 1000;
  m := time mod 3600000 div 60000;
  h := time div 3600000;
  result:= (toStr(h) + 'h ' + toStr(m) + 'm ' + toStr(s) + 's');
end;

function tOGL.callProcedure(funcProcedure: procedure; funcDebug: boolean=true): boolean; override; // Created to utilize the funcDebug variable
begin
  if @funcProcedure<>nil then
  begin
    if funcDebug then // <--- right there
      writeLn(formatDateTime('tt',time()),' | ',ogl.getScriptName(),' > ',replaceRegExpr('procedure\(\)\s\("?([\w]+)[":\w+]*?\)',toStr(@funcProcedure),'$1',true));
    funcProcedure();
    result:=true;
  end;
  exit(result);
end;

function tMainscreen.getXP(skill: string): integer; { CREDITS: Ross }
var
  i, skillID: uint32;
  skillTextures: glTextureArray;
  skillBoxTexture: glTexture;
  skillBox: TBox;
begin
  case lowercase(skill) of
    'overall': skillID := 48705;
  end;
  skillTextures:=ogl.getTextures(skillID);
  if skillTextures.isEmpty() then
    exit(result-1);
  skillBoxTexture:=skillTextures[low(skillTextures)];
  skillBox:=skillBoxTexture.bounds.adjustPosition(-150, 0, 0, 0);
  result := explode('+', ogl.getChars(skillBox).toString())[0].parseInt();
end;

function fGetUnfTextures(): glTextureArray; // pre oven urn textures
var
  _urnTextures: glTextureArray;
begin
  case ezUrnType.val() of
    'Strong': _urnTextures := _Textures.getTextures(133620, 3089163);
    'Decorated': _urnTextures := _Textures.getTextures(133620, 3483659);
  end;
  result := _urnTextures;
end;

function fGetNrTextures(): glTextureArray; // post oven urn textures
var
  _urnTextures: glTextureArray;
begin
  case ezUrnType.val() of
    'Strong': _urnTextures := _Textures.getTextures(133620, 3155993);
    'Decorated':  _urnTextures := _Textures.getTextures(133620, 3747612);
  end;
  result := _urnTextures;
end;

function fHasClay(): boolean; //  Clay textures in inventory
begin
  exit(not _Textures.getTextures(93840, 2103044).isEmpty());
end;

function fHasWheel(): boolean; //  Wheel model
begin
  exit(not _Models.getModels(3713745854).isEmpty());
end;

function fHasOven(): boolean; // Oven model
begin
  exit(not _Models.getModels(929167922).isEmpty());
end;

function fHasBank(): boolean; // Bank model
begin
  exit(not _Models.getModels(1416933807).isEmpty());
end;

function fHasMakeWheelUrn(): boolean; // Has 'cooking urns' selected in wheel interface
begin
  exit(execRegexpr('(?i).*cooking urn (unf).*',_Chars.toString()));
end;

function fHasProductionInterface(): boolean; // Checks if crafting screen is open. hasProduction doesnt support 'Crafting'?
begin
  exit(execRegexpr('(?i).*Crafting.*',_Chars.toString()));
end;

function fHasPopup(): boolean; // Looks for the progress bar 'XP Popup'
begin                        // green bar                                        bar trough
  exit((not _Textures.getTextures(52284, 1908512).isEmpty()) or (not _Textures.getTextures(10710, 2965537).isEmpty()));
end;

function fHasBankInterface(): boolean; // Checks if bank interface is open
begin
  exit(execRegexpr('(?i).*Bank of RuneScape.*',_Chars.toString()));
end;

function fHasFlag():boolean;
begin
  exit(not _Textures.getTextures(1275).isEmpty());
end;

function fHasPlayer():boolean;
begin
  exit(not _Models.getModels(_yourModelID).isEmpty());
end;

procedure pResetCamera();
var
  i: integer;
begin
  minimap.setDegrees(random(45, 135));
  mainScreen.setVerticalDirection('high');
  wait(random(350, 650));
  mainScreen.setHorizontalRadians(randomRange(300, 310) / 100);
  for i:=0 to random(38, 45) do
  begin
    wait(random(10, 20));
    mouse.scroll([random(0, 500), random(0, 300)], 'down');
  end;
end;

procedure pBank();
var
  _bank: glModelArray;
begin
  case random(10) of // little bit of antiban
    1:
    begin
      pResetCamera();
      wait(random(450, 750));
    end;
  end;
  _bank := _Models.getModels(1416933807);
  mouse.rightClickOption(_Center.closest(_bank)[0].randomizePointEllipse(40), 'Bank', random(750, 1250));
  _UrnMadeCount += (fGetNrTextures().indexes - 1);
end;

procedure pWithdraw(); // Uses bank preset
begin
  case random(10) of
    1: bank.clickPreset(strToInt(ezBankPreset.val()));
    2..10: sendKeys(ezBankPreset.val(), random(75, 100), random(75, 100));
  end;
end;

procedure pWalkCraft(); // walks towards crafting area
begin
  if (not _Minimap.getTextures(40536, 3026475).isEmpty()) then // If craft icon is visible, click that first
    mouse.click(_Minimap.getTextures(40536, 3026475)[0].randomizePointEllipse(20))
  else if (not _Minimap.getTextures(36609, 2964562).isEmpty()) then // click  clan flag icon
    mouse.click(_Minimap.getTextures(36609, 2964562)[0].adjustPosition(random(15, 22), random(5, 15)).randomizePointEllipse(25))
  else if (not _Minimap.getTextures(45052, 4668991).isEmpty()) then // click brown pot icon
    mouse.click(_Minimap.getTextures(45052, 4734277)[0].adjustPosition(random(-5, 5), random(-20, 5)));
end;

procedure pWalkBank(); // walks towards bank
begin
  if (not _Minimap.getTextures(45052, 4668991).isEmpty()) then // If bank icon is visible, click that first
    mouse.click(_Minimap.getTextures(45052, 4668991)[0].adjustPosition(0, random(-5, 5)).randomizePointEllipse(15))
  else if (not _Minimap.getTextures(45052, 4668991).isEmpty()) then // click brown pot icon
    mouse.click(_Minimap.getTextures(45052, 4734277)[0].adjustPosition(random(-5, 5), -random(10)))
  else if (not _Minimap.getTextures(36609, 2964562).isEmpty()) then // click near clan flag icon
    mouse.click(_Minimap.getTextures(36609, 2964562)[0].adjustPosition(random(15, 30), random(5, 15)).randomizePointEllipse(25))
end;

procedure pUseWheel(); // clicks the pottery wheel
var
  _wheel: glModelArray;
begin
  _wheel := _Models.getModels(3713745854);
  case random(2) of
    true: mouse.rightClickOption(_Center.closest(_wheel)[0].randomizePointEllipse(25), 'Form', random(750, 1250));
    false: mouse.click(_Center.closest(_wheel)[0].randomizePointEllipse(25));
  end;
end;

procedure pUseOven(); // clicks the oven
var
  _oven: glModelArray;
begin
  _oven := _Models.getModels(929167922);
  case random(2) of
    true: mouse.rightClickOption(_Center.closest(_oven)[0].randomizePointEllipse(50), 'Oven', random(750, 1250));
    false:
    begin
      if mouse.getTooltip()<>'Oven' then // in case some jerk puts a vex in front on the oven...
        mouse.rightClickOption(_Center.closest(_oven)[0].randomizePointEllipse(50), 'Oven', random(750, 1250));
      mouse.click(_Center.closest(_oven)[0].randomizePointEllipse(60));
    end;
  end;
end;

procedure pMakeUrn(); // Essentially hits the space bar, or starts production - works in wheel and oven
var
  _productNum: integer;
begin
  case ezUrnType.val() of
    'Strong': _productNum := 3;
    'Decorated': _productNum := 4;
  end;
  if production.getProduct()<>_productNum then
  begin // If cooking urns selected, but not right type of cooking urn, rectify that
    production.setProduct(_productNum);
    wait(random(450, 750));
  end;
  PressKey(32); // spacebar
end;

procedure pSetProduct(); // First time opening wheel usually defaults to fishing urns... gotta have cooking urns
var
  _urnTypeBox: tBox;
  _productNum: integer;
begin
  case ezUrnType.val() of
    'Strong': _productNum := 3;
    'Decorated': _productNum := 4;
  end;
  wait(random(350, 650));
  _urnTypeBox := [119, 73, 259, 83];
  mouse.click(_urnTypeBox);
  wait(random(450, 750));
  _urnTypeBox := [49, 107, 163, 120];
  mouse.click(_urnTypeBox);
  wait(random(450, 850));
  production.setProduct(_productNum);
end;

procedure pReport(); // Smart Proggy!
var
  _currentXP, _paintXP: integer;
  _time: string;
begin
  _currentXP := mainscreen.getXP('overall');
  _paintXP := _currentXP - _StartXP;
  _time := ogl.getFormattedTime(getTimeRunning());
  if _UrnMadeCount < 0 then
    _UrnMadeCount := 0;

  if _timer.isFinished() or _Done then
  begin
    smart.graphics.clear;
    smart.graphics.DrawText('runtime: '+ _time, 'smallChars', point(11, 29), clYellow);
    smart.graphics.DrawText(toStr(_paintXP) + ' xp gained', 'smallChars', point(11, 11), clYellow);
    smart.graphics.DrawText(toStr(_UrnMadeCount) + ' urns made (out of ' + toStr(_UrnMakeCount) + ')', 'smallChars', point(11, 47), clYellow);
    if _Done then
      smart.graphics.DrawText('Status: Finished', 'smallChars', point(11, 83), clFuchsia)
    else
    begin
      smart.graphics.DrawText('Status: Making ' + lowercase(ezUrnType.val()) + ' urns', 'smallChars', point(11, 83), clFuchsia);
      smart.graphics.DrawText('Status: Making ' + lowercase(ezUrnType.val()) + ' urns', 'smallChars', point(10, 83), clYellow);
    end;
    _Timer.setTime(15000);
  end;
end;

procedure pFin();
begin
  if (_UrnMadeCount >= strToInt(ezUrnMakeCount.val())) then
    writeLn('Met goal target, terminating script ...')
  else if (inventory.getItemCount < 2) then
    writeLn('Ran out of materials, terminating script ...');
end;

procedure mainLoop();
var
  _Procedure: procedure() = nil;
  _LastProcedure: procedure() = @pReport;
  _Flag, _FlagLast, _Player, _PlayerLast: boolean;
  _InvCount, _LastInvCount: integer;
  _ProgTimer: tCountdown;
begin
  repeat
    _Chars := ogl.getChars();
    _Models := ogl.getModels(tBox([0, 0, 576, 388]));
    _Textures := ogl.getTextures(tBox([0, 0, 800, 600]));
    _Minimap := ogl.getTextures(minimap.getBounds());
    _UrnMakeCount := strToInt(ezUrnMakeCount.val());

    if (_Flag:=fHasFlag()) or (_Flag<>_FlagLast) then // Flag visible = do nothing
      _NextAction.setTime(normalRandom(0, 3000));
    if (_Player:=fHasPlayer())<>_PlayerLast or (fHasPopup()) then // Xp Popup visible = do nothing
      _NextAction.setTime(normalRandom(0, 2000));

    if _NextAction.isFinished() then
    begin
      if (_Textures.getTextures(93840, 2103044).indexes < 2) and (fGetUnfTextures().indexes < 1) then
      begin // go bank them urns
        if (not fHasBank()) then
          _Procedure := @pWalkBank
        else if (inventory.getItemCount < 2) and (not fHasBankInterface()) and (not (@_Procedure<>@pWithdraw)) then
          exit()
        else if fHasBankInterFace() and (not fHasFlag()) then
          _Procedure := @pWithdraw
        else if fHasBank() and (not fHasBankInterFace()) and (not fHasFlag()) then
          _Procedure := @pBank
      end
      else if fHasClay() and (_Textures.getTextures(93840, 2103044).indexes > 1) then
      begin // go make them urns
        if (not fHasWheel()) then
          _Procedure := @pWalkCraft
        else if (not fHasFlag()) and fHasProductionInterface() and (not fHasMakeWheelUrn()) and (@_Procedure<>@pSetProduct) then
          _Procedure := @pSetProduct
        else if (not fHasFlag()) and fHasProductionInterface() then
          _Procedure := @pMakeUrn
        else if (not fHasFlag()) and fHasWheel() and (not fHasProductionInterface()) and (_Textures.getTextures(93840, 2103044).indexes > 1)  then
          _Procedure := @pUseWheel
      end
      else
      begin // go bake them urns
        if (not fHasFlag()) and fHasProductionInterface() and (@_Procedure<>@pMakeUrn) then
          _Procedure := @pMakeUrn
        else if (not fHasProductionInterface()) and (not fHasFlag()) and (fHasOven()) and (fGetUnfTextures().indexes > 0) and (@_Procedure<>@pUseOven) then
          _Procedure := @pUseOven
      end;

      if @_Procedure<>nil then
      begin // go call them procedures
        ogl.callProcedure(@_Procedure, _DEBUG);
        _NextAction.setTime(random(750, 1250));
      end;
    end;

    _FlagLast:=_Flag;
    _PlayerLast:=_Player;
    _LastInvCount:=_InvCount;

    if ezSmartProggy.checked() then
      pReport()
    else
      smart.graphics.clear;

  until _UrnMadeCount >= strToInt(ezUrnMakeCount.val());
end;

begin
  clearDebug();
  //getUpdate();

  ogl.setup([800, 600], [0, 0, 576, 388]);
  ogl.setDebugMode(_OGL_DEBUG_MODE);
  pFormCreate();

  if _yourModelID<>1 then
  begin
    _Timer.setTime(1);
    pResetCamera();
    _StartXP := tMainscreen.getXP('overall');
    _UrnMadeCount := 0;

    mainLoop();
    _Done := true;
    pFin();
  end
  else
    writeLn('SET YOUR MODEL ID, LINE 8, YO');
end.
